#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Mar 25 12:09:16 2023

@author: julio
"""

import numpy as np

def crout_factorization_block_tridiagonal(A):
    """
    Performs Crout factorization on a given block tridiagonal matrix A.
    
    Parameters:
    ----------
    A : numpy.ndarray
        The block tridiagonal matrix to be factored.
        
    Returns:
    -------
    L : numpy.ndarray
        The lower triangular matrix of the factorization.
    U : numpy.ndarray
        The upper triangular matrix of the factorization.
    """
    n = A.shape[0]
    m = A.shape[1]
    L = np.zeros((n, m))
    U = np.zeros((n, m))
    
    # Block 1
    U[0, :m[0]] = A[0, :m[0]]
    for i in range(1, m[0]):
        L[i, :i] = A[i, :i] / U[:i, i-1]
        U[i, i:m[0]] = A[i, i:m[0]] - L[i, :i] @ U[:i, i:m[0]]
    
    # Blocks 2 to n-1
    for k in range(1, n-1):
        U[k, k:m[k]] = A[k, k:m[k]] - L[k, :k] @ U[:k, k:m[k]]
        L[k+1, :k+1] = A[k+1, :k+1] / U[k, k-1]
        U[k+1, k+1:m[k+1]] = A[k+1, k+1:m[k+1]] - L[k+1, :k+1] @ U[:k+1, k+1:m[k+1]]
    
    # Block n
    U[n-1, n-m[n-1]:] = A[n-1, n-m[n-1]:] - L[n-1, :m[n-1]-1] @ U[:n-1, n-m[n-1]:]
    
    # Set diagonal entries of L to 1
    np.fill_diagonal(L, 1)
    
    return L, U
